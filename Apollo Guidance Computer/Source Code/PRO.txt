//ASCENT PRO KEY

/*
The Apollo Guidance Computer
Architecture and operation
Frank O'Brien 2010

07-2019 DSKY CREATION DATE
11-1-23 DEVELOPMENT INCEPTION DATE 
_______________________________________________________
"There were no  specs. We made it up as we went along"
-------------------------------------------------------
*/

/*REVISION HISTORY

07/07/2019 DEVLOPMENT INITIATION

09/21/2024 - ADDED AGC NAVIGATION STAR CATALOG MENU ITEM AND WINDOW

*/

//BEGIN PDI SEQUENCE

//CZECH FOR OPR ERR
IF (SLE_2.TEXT = "") THEN
	SLE_16.ENABLED = TRUE //ENABLE OP_ERR
	SLE_14.ENABLED = FALSE //DISABLE KEY REL
	
ELSE
	
	MLE_1.ENABLED = TRUE //ENABLE THE COMP ACTY LIGHT
	
END IF
//DECLARE VECTOR VARIABLES
DOUBLE D_X 
DOUBLE D_Y
DOUBLE D_Z

//THESE VARIABLES WILL BE USED FOR ALL PROGRAMS RUNNING IN THE REGISTERS.
STRING S_REG_1 //STRING TO CAPTURE TEXT ENTERED INTO 1ST REGISTER
STRING S_OUTPUT1 //STRING TO CAST TO OUTPUT 1ST REGISTER
S_REG_1 = SLE_7.TEXT //GET THE TEXT FROM THE 1ST REGISTER AND CONVERT IT TO A DOUBLE
DOUBLE D_REG_1
D_REG_1 = DOUBLE(S_REG_1) //CAST THE TEXT CAPTURED TO A DOUBLE AND PASS IT TO THE LOOP

//VARIABLES FOR REGISTER 2 
STRING S_REG_2 //STRING TO CAPTURE TEXT ENTERED INTO 1ST REGISTER
STRING S_OUTPUT2 //STRING TO CAST TO OUTPUT 1ST REGISTER
S_REG_2 = SLE_8.TEXT //GET THE TEXT FROM THE 1ST REGISTER AND CONVERT IT TO A DOUBLE
DOUBLE D_REG_2
D_REG_2 = DOUBLE(S_REG_2) //CAST THE TEXT CAPTURED TO A DOUBLE AND PASS IT TO THE LOOP

//VARIABLES FOR REGISTER 3 
STRING S_REG_3 //STRING TO CAPTURE TEXT ENTERED INTO 1ST REGISTER
STRING S_OUTPUT3 //STRING TO CAST TO OUTPUT 1ST REGISTER
S_REG_3 = SLE_9.TEXT //GET THE TEXT FROM THE 1ST REGISTER AND CONVERT IT TO A DOUBLE
DOUBLE D_REG_3
D_REG_3 = DOUBLE(S_REG_3) //CAST THE TEXT CAPTURED TO A DOUBLE AND PASS IT TO THE APPROPRIATE LOOP


//VARIABLES FOR TIMERS AND MAIN FUEL REGISTERS
STRING S_MISSIONTMR
STRING S_EVENTTMR
STRING S_FUEL
STRING S_OXIDIZER
STRING S_HELIUM

DOUBLE D_MISSIONTMR
DOUBLE D_EVENTTMR = 0000
DOUBLE D_OXIDIZER
DOUBLE D_FUEL
DOUBLE D_HELIUM

//CAPTURE THE PRE-LOADED TIMER AND FUEL REGISTERS AND ASSIGN THEM TO STRINGS

S_MISSIONTMR = SLE_53.TEXT
//S_EVENTTMR = SLE_58.TEXT WE DON'T NEED TO CAPTURE THIS TEXT. EACH EVENT WILL BE TIMED FROM ZERO.
S_OXIDIZER = SLE_64.TEXT
S_FUEL = SLE_65.TEXT
S_HELIUM = SLE_67.TEXT

//CAST THE CAPTURED STRINGS TO THE DOUBLE DECLARATIONS
D_MISSIONTMR = DOUBLE (S_MISSIONTMR)
D_EVENTTMR = DOUBLE (S_EVENTTMR)
D_OXIDIZER = DOUBLE (S_OXIDIZER)
D_FUEL = DOUBLE (S_FUEL)
D_HELIUM = DOUBLE (S_HELIUM)


//REGISTER HOLDS DURING PROGRAM TALKBACKS

STRING S_PRO
STRING S_VERB
STRING S_NOUN

STRING S_2IV6N62_R1
STRING S_2IV6N62_R2
STRING S_2IV6N62_R3

//MISSION AND FUEL STATUS REGISTER HOLDS
STRING S_MISSIONTMRH
STRING S_EVENTTMRH
STRING S_OXIDIZERH
STRING S_FUELH
STRING S_HEDLIUMH
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IF SLE_6.TEXT = "61" THEN //CZECH FOR NOUN 61

CB_20.SETFOCUS()

SLE_48.TEXT = ""
SLE_48.REPLACETEXT ("P63 BRAKING PHASE")

//CLEAR OUT THE HOLD REGISTERS
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")


SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")

	IF RB_10.CHECKED =  FALSE THEN
	MESSAGEBOX("CLOSE LANDING RADAR CIRCUT", "LDG RDR")
	ELSE

DO UNTIL (D_REG_1 = 0) OR (D_REG_2 = 0) OR (D_REG_3 = 32000) //DO ALL 3 REGISTERS IN THE SAME LOOP FOR P63, V06, N61.

//P63,V06, N61
//REGISTER 1 TIME TO GO IN BRAKING PHASE = DECREMENT
	D_REG_1 = D_REG_1 + 1.5	
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 >0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1 		
			
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 			
		
	END IF
	
	
	//REGISTER 2 TIME FROM IGNITION -02 50 = DECREMENT
		D_REG_2 = D_REG_2 + .5	//INCREMENTS OF 1 TO SEE IF THIS PROTOTYPE WORKS
	
		S_OUTPUT2 = STRING(D_REG_2)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT

	IF D_REG_2 >0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 		
			
		ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 		
			
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
		
		
		//REGISTER 3 CROSSRANGE DISTANCE = INCREMENT
		D_REG_3 = D_REG_3 + 60	//INCREMENTS OF 1 TO SEE IF THIS PROTOTYPE WORKS
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN
	
	SLE_9.TEXT = "+" + S_OUTPUT3		
		

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 
		
	END IF
	
	
	/* DO A FUEL CZECH TO SEE IF THE USER KEYED SOMETHING OUT OF SEQUENCE
	OR DID NOT CORRECT AN OP ERR LIGHT WITH A RSET.
	IF THE PROCEDURES ARE FOLLOWED PROPERLY, THEN FUEL WILL BE NO LESS THAN 16 BY LANDING.
	THIS IS ABOUT AS CLOSE TO A VIDEO GAME AS THIS PROGRAM WILL GET.
	ALTHOUGH THERE IS ERROR CZECHING, ITS STILL POSSIBLE FOR THE PILOT
	TO GET STUCK IN AN INFINITE LOOP IN WHICH CASE FUEL WILL GO BELOW 16.
	THIS WAY THE PROGRAM WON'T BE STUCK IN AN INFINITE LOOP.
	*/ 
		
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF
	

//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + 37 //INCREMENT QUICKER SINCE THIS IS THE 1ST STEP OF BRAKING PHASE
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.005
D_FUEL = D_FUEL - .003
D_HELIUM = D_HELIUM -.5

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

//UPDATE THE COMP ACTY TEXT WITHIN THE LOOP TO SIMULATE A FLASHING LIGHT
MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
	
LOOP

SLE_8.TEXT = "00000" //BEGIN IGNITION
MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION

//UPDATE THE HOLD REGISTERS IN CASE OF SYSTEM RESTART
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)


//MESSAGEBOX("ENFORCE PROCEDURES", "ENTER N33, PUT RADAR INTO SLEW")

SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL N33 RDR SLEW+E")
SLE_74.REPLACETEXT ("TIME TO IGNITION")

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE //PRO

END IF

 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//V50, N33
ELSEIF SLE_6.TEXT = "33" THEN 

	SLE_7.REPLACETEXT("00102")
	SLE_8.REPLACETEXT("000 40")
	SLE_9.REPLACETEXT("0054")
	CB_20.SETFOCUS()
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//V50, N25	
	ELSEIF SLE_6.TEXT = "25" THEN //WE ONLY HAVE TO CZECH FOR NOUNS SINCE THEY'RE UNIQUE
	
	SLE_14.ENABLED = TRUE //ENABLE KEY REL
	CB_20.SETFOCUS()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//V50, N18 WELL FLIP THE VALUES FOR ROLL AND PITCH IN THE SIMULATION
//WHILE KEEPING YAW RELATIVELY STATIC

	ELSEIF SLE_6.TEXT = "18" THEN //WE ONLY HAVE TO CZECH FOR NOUNS SINCE THEY'RE UNIQUE
		
	CB_20.SETFOCUS()
	
	DO UNTIL (D_REG_1 = 28596)
		
	//PUT LOOP HERE FOR V50 N18
	//WELL FLIP THE VALUES FOR ROLL AND PITCH IN THE SIMULATION
	D_REG_1 = D_REG_1 + 4	//REGISTER 1
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 >0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1			
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 
		
	END IF
	
	D_REG_2 = D_REG_2 - 4	//TRY AND FLIP ROLL AND PITCH
	
	S_OUTPUT2 = STRING(D_REG_2)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT	
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 
		

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 		
			
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
		//YAW
		D_REG_3 = D_REG_3 + .0005	//KEEP THE YAW MOVING SLOW. 
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN
	
	SLE_9.TEXT = "-" + S_OUTPUT3 
		
			
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 	
					
	END IF
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.

//SINCE V50, N18 IS THE LONGEST PHASE OF BRAKING, 
//WE'LL INCREMENT THE MISSION TIMER A LITTLE LONGER 
D_MISSIONTMR = D_MISSIONTMR + 2 

D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.007
D_FUEL = D_FUEL - .004
D_HELIUM = D_HELIUM -.5

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"	
			
	LOOP	
	
	//GET VECTORS
	D_X = DOUBLE (SLE_7.TEXT)
	D_Y = DOUBLE (SLE_8.TEXT)
	D_Z = DOUBLE (SLE_9.TEXT)

//AND REFERENCE THE F_VECTOR FUNCTION CONSTRUCTORS
SLE_69.TEXT = STRING (F_VECTOR(D_X, D_Y, D_Z))
		
	MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION
	
	SLE_19.ENABLED = TRUE //ENABLE ALT - ALTITUDE LIGHT GOES ON BECAUSE THE LANDING RADAR ISN'T FACING THE SURFACE.
	SLE_14.ENABLED = TRUE //ENABLE KEY REL
	
		//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE //PRO


//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)
	
	//MESSAGEBOX("ENFORCE PROCEDURES", "ENTER V06,N62, ENABLE DESC ENG")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL V06 N62 DESC ENG ARM+E PRO")
SLE_74.REPLACETEXT ("DELTA/V")
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//V06, N62
	
	//VELOCITY
	//TIME FROM IGNITION
	//DELTA V
	ELSEIF SLE_6.TEXT = "62" THEN //WE ONLY HAVE TO CZECH FOR NOUNS SINCE THEY'RE UNIQUE
	CB_20.SETFOCUS()
	
	DO UNTIL (D_REG_2 = -3.5) //WE'LL TRY AND DO A COUNTDOWN LOOP CONTROLLER WHILE SIMULATING THE OTHER REGISTERS
		
	//PUT LOOP HERE FOR V06 N62	
	D_REG_1 = D_REG_1 + 1	//INCREMENT VELOCITY
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 >0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1 		
			
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		
		SLE_7.TEXT = S_OUTPUT1 		
			
	END IF
	
	D_REG_2 = D_REG_2 - .5 //TIME FROM IGNITION
	
	S_OUTPUT2 = STRING(D_REG_2)	
	
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		
		SLE_8.TEXT = S_OUTPUT2 
		
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
		//DELTA V
		D_REG_3 = D_REG_3 + .05	//KEEP DELTA V MOVING SLOW. 
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN
	
	SLE_9.TEXT = "+" + S_OUTPUT3 
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 				
		
	END IF		
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + .2
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.002
D_FUEL = D_FUEL - .003
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

SLE_9.ENABLED = TRUE
SLE_5.TEXT = ""
SLE_5.TEXT= ("99") //FIRE DESCENT ENGINE

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
				
	LOOP	

MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION

//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)


//MESSAGEBOX("FIRE DESCENT ENGINE", "PRESS KEY REL AND PRO")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL PRO 99")
SLE_74.REPLACETEXT ("99 DESCENT ENGINE BURN")

	//END OF V06, N62
	CB_1.ENABLED = FALSE //ENTR
	CB_2.ENABLED = FALSE //PRO

//SLE_5.TEXT = ""
//SLE_5.TEXT= ("99") //FIRE DESCENT ENGINE

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//VERB 99 ASKS THE PILOT - ARE YOU SURE YOU WANT TO DO THIS BURN???
//10% ENGINE BURN.
//WE'LL TRY AND FLASH THE COMP ACTY LIGHT
//AND CONTINUE TO DECREMENT THE MISSION AND FUEL REGISTERS
ELSEIF (SLE_5.TEXT = "99") THEN
	
	SLE_5.ENABLED = TRUE
	CB_20.SETFOCUS()
	
	DOUBLE I_COMP = 2000
	
	DO UNTIL (I_COMP = 0 )
		
	I_COMP = I_COMP - 1
	
	MLE_1.ENABLED = FALSE
	MLE_1.ENABLED = TRUE 
	MLE_1.ENABLED = FALSE
	MLE_1.ENABLED = TRUE 
	
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + .5
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.005
D_FUEL = D_FUEL - .003
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

//UPDATE THE MISSION TIMER AND FUEL HOLDS SINCE WE'RE LOOPING THEM IN V99
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
	
LOOP	
		
//MESSAGEBOX("FILL IN HERE", "FILL IN HERE")

SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL V06 N63 DESC ENG OVR+E PRO")
SLE_74.REPLACETEXT ("ALTITUDE CHECK")

SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE 
SLE_2.ENABLED = TRUE
	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE //PRO
	
	//ENABLE V,N AFTER 99 BURN
	CB_1.ENABLED = TRUE
	CB_2.ENABLED = TRUE

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//FINAL LGC UPLINK DATA BEFORE PDI SEQUENCE
//NO FUEL IS USED HERE
ELSEIF (SLE_2.TEXT = "27") THEN
	
	CB_20.SETFOCUS()
		
	DOUBLE I_UPLINK = 2000
	
	DO UNTIL (I_UPLINK = 0 )
		
		
	I_UPLINK = I_UPLINK - 1
	
	//COMP ACTY LIGHT
	MLE_1.ENABLED = TRUE 
	MLE_1.TEXT = ""
	mle_1.text = "       "+ "COMP" +  " ACTY"
	
	//UPLINK LIGHT
	MLE_9.ENABLED = TRUE
	MLE_9.TEXT = ""
	mle_9.text = + "UPLINK" +  " ACTY" //"       " 7 spaces is width of control
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + .5
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.002
D_FUEL = D_FUEL - .002
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 


LOOP

	//UPDATE THE REGISTERS WITH PROGRAM START DATA AFTER LOOP AND ENABLE KEY REL 
	//THESE ARE THE ACTUAL LANDING COORDINATES AFTER LANDING FROM APOLLO 11 MINUS THE ALTITUDE
	
	MLE_1.ENABLED = FALSE
	
	SLE_7.TEXT = "+67408" //Z
	SLE_8.TEXT = "+23472" //X
	SLE_9.TEXT = "+02717" //Y
	
	SLE_72.TEXT = ""
   SLE_74.TEXT = ""
	SLE_72.TEXT = "KEY REL V37E P63E LDG RDR PRO"
	SLE_74.TEXT = "CHANGE TO PROG 63 PDI"
	
	MLE_9.ENABLED = FALSE
	
//UPDATE THE MISSION TIMER AND FUEL HOLDS SINCE WE'RE LOOPING THEM IN V99
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)

S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)
	
	
	SLE_14.ENABLED = TRUE //KEY REL
	
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	//V06, N63	
	ELSEIF SLE_6.TEXT = "63" THEN //WE ONLY HAVE TO CZECH FOR NOUNS SINCE THEY'RE UNIQUE	
	
	//DELTA ALTITUDE: +54306 FT FROM SURFACE //COUNT DOWN
	//ALTITUDE RATE: +00030 FT/SEC (COUNT UP)
	//COMPUTED ALTITUDE: +46732 FT FROM SURFACE (COUNT DOWN)	
	CB_20.SETFOCUS()
	DO UNTIL (D_REG_2 = 5010) //ALTITUDE RATE CZECH TERMINATES LOOP
		
	D_REG_1 = D_REG_1 - 95.8	//DECREMENT DELTA ALTITUDE
	
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 > 0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1 		
			
		ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 		

	END IF
	
	D_REG_2 = D_REG_2 + 10 //INCREMENT ALTITUDE RATE
	
	S_OUTPUT2 = STRING(D_REG_2)	
	
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 			
		
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
	//DECREMENT COMPUTED ALTITUDE BUT NOT TO THE POINT ITS NEARING 0. WE HAVE TO RETURN TO THIS VALUE
	//TO PERFORM THE YAW MANOUVER, WHERE WE WILL KEEP DECREMENTING.
	
		D_REG_3 = D_REG_3 - 80	
	
		S_OUTPUT3 = STRING (D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN 
	
	SLE_9.TEXT = "+" + S_OUTPUT3 		
			
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		
		SLE_9.TEXT = S_OUTPUT3 			
		
	END IF
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + 7
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.005
D_FUEL = D_FUEL - .004
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
			
	LOOP

	SLE_14.ENABLED = TRUE //ENABLE KEY REL
	MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION
	
	CB_1.ENABLED = FALSE
	CB_1.ENABLED = FALSE
	
//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

//DISPLAY DIFFERENCE BETWEEN DELTA ALTITUDE AND COMPUTED ALTITUDE IN LANDING ATT SLE_76
DOUBLE D_DELTA
DOUBLE D_COMP
DOUBLE D_DIFF

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

D_DIFF = DOUBLE (S_2IV6N62_R1) - DOUBLE (S_2IV6N62_R3) //CAST THE MATH

SLE_76.ENABLED = TRUE
SLE_76.TEXT = ""
SLE_76.TEXT = "D/A " + STRING (D_DIFF) //SET THE SLE WITH THE DIFFERENCE

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)
	
	//MESSAGEBOX("ENABLE LANDING RADAR", "KEY REL, PUT PGNCS TO AUTO, CLICK YAW,  ")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL PGNCS TO ATO CLICK YAW")
SLE_74.REPLACETEXT ("YAW+PITCH 180 LND RADAR TO MOON")

//HERE, WE DISABLE BOTH THE ENTR AND PRO

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = FALSE //PRO
	
	
//AND THE V,N KEYS SINCE THE NEXT STEP IS THE 180 YAW CORRECTION
//WE DON'T WANT THE USER TO BE ENTERING V,N,s AT THIS POINT
//WE'LL RE-ENABLE AFTER THE MANOUVER IS COMPLETE

CB_1.ENABLED = FALSE
CB_2.ENABLED = FALSE	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//V16, N68	
	ELSEIF SLE_5.TEXT = "16" THEN //WE ONLY HAVE TO CZECH FOR VERBS SINCE THIS ONE IS UNIQUE
	CB_20.SETFOCUS()
	//R1 GROUND RANGE TO LANDING SITE +00582 MMI (DECREMENT)
	//R2 TIME LEFT IN BRAKING PHASE +04 28 MIN/SEC (DECREMENT)
	//R3 ABSOLUTE VELOCITY FT/SEC 03828 DELTA H. (DECREMENT)	
	
	//ATT HOLD ENABLED. WE ARE TESTING MANUAL CONTROLS
	//AND ARE GETTING READY TO SWITCH TO PROGRAM 64 APPROACH PHASE
IF RB_20.CHECKED = TRUE THEN 


RB_20.CHECKED = FALSE //IMMEDIATELY DE-CHECK ATT MAN

 SLE_22.TEXT = ""
 SLE_22.TEXT = ("AUTO ATT")

RB_18.CHECKED = TRUE //AND ENABLE THE ATT HOLD TO AUTO AFTER THE EVALUATION TO SIMLUATE GOING BACK INTO AUTO

//R1: GROUND RANGE TO LANDING SITE +00068 MMI DECREMENT
//R2: TIME LEFT IN BRAKING PHASE +0122 MIN/SEC   DECREMENT
//R3: ABSOLUTE VELOCITY FT/SEC +00026 //DELTA H DECREMENT
	
	DO UNTIL (D_REG_2 = 0000) //GROUND RANGE TO LANDING SITE TERMINATES LOOP
		
	D_REG_1 = D_REG_1 - .0001 //DECREMENT DELTA ALTITUDE
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 > 0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1 				

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 
		
	END IF
	
	D_REG_2 = D_REG_2 - .5 //DECREMENT BRAKING PHASE
	
	S_OUTPUT2 = STRING(D_REG_2)		
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2			

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 		
			
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
	//DECREMENT COMPUTED ALTITUDE BUT NOT TO THE POINT ITS NEARING 0. WE HAVE TO RETURN TO THIS VALUE
	//TO PERFORM THE YAW MANOUVER, WHERE WE WILL KEEP DECREMENTING.
	
		D_REG_3 = D_REG_3 - .23	
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN 
	
	SLE_9.TEXT = "+" + S_OUTPUT3 

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 	

	END IF
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + .5
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.005
D_FUEL = D_FUEL - .004
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD


//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 


//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 


//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 


//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM)

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
			
	LOOP

	//AT THE END OF THIS LOOP WE AUTOMATICALLY SWITCH TO PROGRAM 64	
	//AND HIT THE PRO KEY AGAIN TO CAPTURE THESE VALUES AND LOOP THEM	
	P_7.VISIBLE = FALSE //HIDE END YAW
	P_8.VISIBLE = TRUE //END 63
	
	//ZERO OUT SLE_8
	SLE_8.TEXT = ""
	SLE_8.TEXT = "00000"
	
	
//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)
	
	MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION
	SLE_14.ENABLED = TRUE //ENABLE KEY REL
	SLE_2.TEXT = ""
	SLE_2.REPLACETEXT ("64")
	
	ST_14.TEXT = ""
	ST_14.TEXT = "APPROACH VECTOR MAGNITUDE"
	
	SLE_69.TEXT = ""

//MESSAGEBOX("BEGIN APPROACH PHASE", "KEY REL, V06 N64, ENTR PRO, RADAR TO HOVER")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL V06 N64E RDR TO HVR PRO")
SLE_74.REPLACETEXT ("VECTOR MEASUREMENTS")
	
	SLE_48.TEXT = ""
   SLE_48.REPLACETEXT ("P64 APPROACH PHASE")
	
	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE //PRO

ELSE	//MANUAL CONTROL IS NOT ENABLED. DAP MODE IS AUTO.

	CB_20.SETFOCUS()
	DO UNTIL (D_REG_1 = 00382) //GROUND RANGE TO LANDING SITE TERMINATES LOOP
		
	D_REG_1 = D_REG_1 - .5 //DECREMENT DELTA ALTITUDE
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 > 0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1 		


	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 
	
	END IF
	
	D_REG_2 = D_REG_2 - 9 //DECREMENT BRAKING PHASE
	
	S_OUTPUT2 = STRING(D_REG_2)	
	
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 

		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
	//DECREMENT COMPUTED ALTITUDE BUT NOT TO THE POINT ITS NEARING 0. WE HAVE TO RETURN TO THIS VALUE
	//TO PERFORM THE YAW MANOUVER, WHERE WE WILL KEEP DECREMENTING.
	
		D_REG_3 = D_REG_3 - 7	
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN 
	
	SLE_9.TEXT = "+" + S_OUTPUT3 
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 	

	END IF
	
//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + .5
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.005
D_FUEL = D_FUEL - .004
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
			
LOOP

SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION

//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)

//MESSAGEBOX("ENFORCE PROCEDURES", "KEY REL, V57 ENTR PRO")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL V57E PRO ")
SLE_74.REPLACETEXT ("INCLUDE RADAR MEASUREMENTS")
	
END IF //END ORIGINAL IF TO EVALUATE MANUAL CONTROL

//TURN BACK ON V,N KEYS
CB_1.ENABLED = TRUE
CB_2.ENABLED = TRUE

CB_19.ENABLED = TRUE //ENTR
CB_16.ENABLED = FALSE //PRO


/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//V57
ELSEIF SLE_5.TEXT = "57" THEN //WE ONLY HAVE TO CZECH FOR VERBS SINCE THIS ONE IS UNIQUE

/*
VERB 57 + ENTER (THIS WILL DO NOTHING PROGRAMMATICALLY) TO PERMIT RADAR UPDATES. 
PRO 63 N68 WILL REMAIN SAME. HIT PRO AND MAKE RETURN TO V16 N63 AFTER ENTR
DELTA ALTITUDE: +24000 FT FROM SURFACE
ALTITUDE RATE: +01148 FT/SEC
//COMPUTED ALTITUDE: +33000 FT FROM SURFACE
*/

RB_20.ENABLED = TRUE //ENABLE ATT MAN FOR NEXT STEP
CB_20.SETFOCUS()

//WE'LL UPDATE THE REGISTER HOLDS HERE SINCE THIS IS THE TEST FOR R+P+Y
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")

	//BLANK IT OUT
	SLE_5.TEXT  = "" //NOUN
	SLE_6.TEXT = "" //VERB
	
	//GO BACK TO V06 N63
	SLE_5.REPLACETEXT ("06")
	SLE_6.REPLACETEXT ("63")
	
	SLE_7.TEXT = ""
	SLE_8.TEXT = ""
	SLE_9.TEXT = ""
	
	SLE_7.REPLACETEXT ("+7241") //24000
	SLE_8.REPLACETEXT ("+01148")
	SLE_9.REPLACETEXT ("+7327") //33000
	
	
	//TODO TAKE THE VALUES ABOVE AND DO A LOOP TO ENABLE THE KEY REL AT THE END 

	//SLE_14.ENABLED = TRUE //ENABLE KEY REL
	
	MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY FOR MANUAL ATTITUDE TEST
	
//WE'LL UPDATE THE REGISTER HOLDS HERE SINCE THIS IS THE TEST FOR R+P+Y	
SLE_39.REPLACETEXT ("63")
SLE_40.REPLACETEXT ("06")
SLE_41.REPLACETEXT ("63")

SLE_36.REPLACETEXT ("+24000")
SLE_37.REPLACETEXT ("+01148")
SLE_38.REPLACETEXT ("+33000")
		
	//MESSAGEBOX("ENFORCE PROCEDURES" , "SWITCH PGNCS TO MAN AND TEST ROLL + PITCH + YAW")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL PGNCS MODE MAN CLICK ROLL")
SLE_74.REPLACETEXT ("TEST MANUAL CONTROL R+P+Y")
SLE_14.ENABLED = TRUE

//DISABLE EVERYTHING. WE'RE TESTING R+P+Y
CB_1.ENABLED = FALSE
CB_2.ENABLED = FALSE
CB_16.ENABLED = FALSE
CB_19.ENABLED = FALSE	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//SWITCH TO PROGRAM 64 APPROACH PHASE

ELSEIF SLE_6.TEXT = "64" THEN //WE ONLY HAVE TO CZECH FOR VERBS SINCE THIS ONE IS UNIQUE
	CB_20.SETFOCUS()
	IF RB_9.CHECKED = FALSE THEN //CZECH HOVER ENABLED 
	
	MESSAGEBOX("RADAR TO HOVER", "PUT RADAR INTO HVR")
	
	 ELSE	
	
	DO UNTIL (D_REG_2 = 2248) //EVALUATE ALTITUDE RATE AT A SLOW INCREMENT
		
		
	D_REG_1 = D_REG_1 - .5	//DELTA ALTITUDE
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 >0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1 				
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 

	END IF
	
	D_REG_2 = D_REG_2 + .5 //ALTITUDE RATE INCREMENT SLOW
	
	S_OUTPUT2 = STRING(D_REG_2)		
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 			
		
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
		D_REG_3 = D_REG_3 - 2.5 //COMPUTED ALTITUDE DECREMENT SLOW
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN
	
	SLE_9.TEXT = "+" + S_OUTPUT3 


	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 	

	END IF


//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
D_MISSIONTMR = D_MISSIONTMR + 25
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.002
D_FUEL = D_FUEL - .004
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"

		//SIMULATE V,N FLASHING FOR RE-DESIGNATIONS
		SLE_5.ENABLED = FALSE
		
		sle_5.text = "06"		
		sle_5.text = ""
		sle_5.text = "06"	
		
		SLE_5.ENABLED = TRUE
	
		sle_5.text = "06"		
		sle_5.text = ""
		sle_5.text = "06"
		
		SLE_6.ENABLED = FALSE	
		
		sle_6.text = "64"				
		sle_6.text = ""
		sle_6.text = "64"
			
		SLE_6.ENABLED = TRUE	
		
		sle_6.text = "64"				
		sle_6.text = ""
		sle_6.text = "64"
				
	LOOP	
	
//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)
	
	P_8.VISIBLE = FALSE //HIDE END 63
	P_9.VISIBLE = TRUE //END 64	
	
	SLE_14.ENABLED = TRUE //ENABLE KEY REL
	MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION
	//SLE_2.TEXT = ""
	//SLE_2.REPLACETEXT ("66")
	
	//	MESSAGEBOX("BEGIN LANDING PHASE", "KEY REL, V06 N60, ENTR, CLICK RADAR TO LAND, THEN PRO")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
/*
LANDING SEQUENCE.
IN ORDER FOR P66 TO EXECUTE, ATT HLD MUST BE ENABLED AND ROD SWITCH HAS TO BE TOGGLED
LANDING RADAR HAS TO BE ENABLED LAST AFTER ENTR AND THEN PRO WILL EXECUTE
DO CZECHS FOR ALL THESE PROCEDURES TO BE EXECUTED SEQUENTIALLY

1. ATT HLD
2. ROD-UP OR DN
3. ENTR
4. LND RDR
5. PRO
*/

SLE_72.REPLACETEXT ("KEY REL ROD+- OR V37E P65E")
SLE_74.REPLACETEXT ("LANDING PHASE (AUTO OR ROD+-)")
	
	SLE_48.TEXT = ""
   SLE_48.REPLACETEXT ("P65 OR P66 LANDING PHASE")
	
   ST_14.TEXT = ""
   ST_14.TEXT = "LANDING VECTOR MAGNITUDE"
	SLE_69.TEXT = ""
	
	//DISABLE THE VERB AD NOUN KEYS UNTIL THE ROD+- IS ENABLED TO START P60
	CB_1.ENABLED = FALSE
	CB_2.ENABLED = FALSE
	
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE
	RB_17.ENABLED = TRUE
	
	CB_1.ENABLED = TRUE
	CB_1.ENABLED = TRUE
	
	END IF //END CZECH IF HOVER IS ENABLED


	
//POST LANDING OPERATIONS
//TELEMETRY UPDATES RELAYED EITHER FROM THE CSM OR MSFN
//NO FUEL CZECH HERE - THE PILOT FOLLOWED PROCEDURES PROPERLY

ELSEIF (SLE_2.TEXT ="68") THEN
	
	RB_19.ENABLED = TRUE //ENABLE THE PGNCS OFF AFTER LOOP EXECUTION
	CB_20.SETFOCUS()
	
	DOUBLE D_PLANDING = 2000
	
	DO UNTIL D_PLANDING = 0
	D_PLANDING = D_PLANDING - 1
	
	//UPDATE THE COMP ACTY TEXT WITHIN THE LOOP TO SIMULATE A FLASHING LIGHT
   MLE_1.TEXT = ""

   mle_1.text = "       "+ "COMP" +  " ACTY"
	
	//UPLINK LIGHT
	MLE_9.ENABLED = TRUE
	MLE_9.TEXT = ""
	mle_9.text = + "UPLINK" +  " ACTY" //"       " 7 spaces is width of control
	
	//CONTINUE TO UPDATE MISSION TIMERS
	D_MISSIONTMR = D_MISSIONTMR + 24
	D_EVENTTMR = D_EVENTTMR + .5
	
	//MISSION TIMER
	S_MISSIONTMR = STRING (D_MISSIONTMR)
	SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD
	
	//EVENT TIMER
	S_EVENTTMR = STRING (D_EVENTTMR)
	SLE_58.TEXT = ("0" + S_EVENTTMR) 
		
LOOP

	//UPDATE THE REGISTERS WITH THE FINAL LANDING COORDINATES AFTER TELEMETRY UPLINK
	SLE_7.TEXT = "67408" //Z
	SLE_8.TEXT = "23472" //X
	SLE_9.TEXT = "2717" //Y
	
	//PP. 142 FIGURE 42: SAMPLE VERB 71 IN UPLINK
	//V33 INDICATES LANDING COORDINATES UPLINK IS COMPLETE
	
	SLE_5.TEXT = ""
	SLE_5.TEXT = "33"	
	
	SLE_14.ENABLED = TRUE //KEY REL
	
	//AND CLOSE OUT THE LANDING
	SLE_72.TEXT = ""
	SLE_74.TEXT = ""
	SLE_72.TEXT = "KEY REL PGNCS TO OFF"
	SLE_74.TEXT = "CLOSE OUT THE LUNAR LANDING"
	
	//TURN OFF UPLINK LIGHT
	MLE_9.ENABLED = FALSE
	
	//MESSAGEBOX("POST LANDING", "POST LANDING OPERATIONS")

//CLEAR ALL THE HOLDS SINCE THIS IS LAST STEP BEFORE PGNCS POWER DOWN
SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""
SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""


//AND PUT THEM IN THE HOLDS
SLE_77.TEXT = ""
SLE_81.TEXT = ""
SLE_78.TEXT = ""
SLE_79.TEXT = ""
SLE_80.TEXT = ""
	
//IF THE PRO KEY IS PRESSED WHEN STDBY IS ON, THEN
//PGNCS IS BEING POWERED UP FOR ASCENT
//ALSO CZECH TO SEE IF PGNCS OFF IS CZECHED.
ELSEIF (SLE_12.ENABLED = TRUE) THEN //OR (RB_19.CHECKED = TRUE))	
	
	 SLE_16.ENABLED = FALSE //FIXES A BUG. DON'T KNOW WHY THE OP ERR LIGHT IS COMING ON.
	 SLE_12.ENABLED = FALSE 
	 
	 ST_14.TEXT = ""
	 ST_14.TEXT = "DOCKING VECTOR MAGNITUDE"
	 
	 //CHANGE RADIO BUTTON TEXT TO ASCENT MODE
	 RB_12.TEXT = ""
	 RB_12.TEXT = "ASCT ENG ON"
	 
	 RB_14.TEXT = ""
	 RB_14.TEXT = "ASCT ENG ARM"
	 
	 //ENABLE VERBS NOUNS AND ENTR
	 CB_1.ENABLED = TRUE
	 CB_2.ENABLED = TRUE
	 CB_19.ENABLED = TRUE
	 
	 CB_16.ENABLED = FALSE //DISABLE PRO KEY
	
	//FINAL EVA COMPLETE, A17 CREW POWERS UP THE COMPUTER AND IMU IN PREP FOR LIFTOFF
	//DISABLE THE EXPLORATION MENU
	M_MAIN.M_LUNARACTY.ENABLED = FALSE
	
	//THEN CHANGE THE WINDOW TITLE
	W_MAIN.TITLE = "Apollo Guidance Computer v1.87 - Ascent Mode"
	
	SLE_12.ENABLED = FALSE
	RB_19.CHECKED = FALSE
	
	SLE_48.TEXT = ""
	SLE_48.TEXT = "P00 LGC/IMU POWER UP"

	INT  I_POWERUP = 1
	
	DO UNTIL I_POWERUP = 2000
		
	//GENE: I got the No Att, the DAP, Gimbal Lock light, and a Program Alarm light's on.	
	  I_POWERUP = I_POWERUP + 1
	  
	  SLE_11.ENABLED = TRUE
	  SLE_11.TEXT = ""
	  SLE_11.TEXT = "NO ATT"
	  
	  MLE_10.ENABLED = TRUE
	  MLE_10.TEXT = ""
	  mle_10.text = + "GIMBAL" +  " LOCK"
	  
	  SLE_13.ENABLED = TRUE
	  SLE_13.TEXT = ""
	  SLE_13.TEXT = "PROG" 
	  
	  SLE_20.ENABLED = TRUE //PP 130 
	  SLE_15.ENABLED = TRUE //PP 130
	  
LOOP	
	
	
RB_27.ENABLED = TRUE //ENABLE IMU ON

SLE_72.TEXT = ""
SLE_72.TEXT = "RSET KEY REL V96E"

SLE_74.TEXT = ""
SLE_74.TEXT = "P00 INTERRUPT INTEGRATION"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//P65 LANDING ENTIRELY ON AUTOPILOT


ELSEIF SLE_5.TEXT = "16 " THEN
	
	//MESSAGEBOX("FILL IN HERE", "FILL IN HERE")
	CB_20.SETFOCUS()
	
		IF RB_15.CHECKED = FALSE THEN //CZECH TO SEE IF RADAR LIGHT IS ILLUMINATED
	
	MESSAGEBOX("PUT RADAR INTO LANDING", "RADAR TO LND")
	
	 ELSE
		
//R1: FORWARD VELOCITY: 00264 FT/SEC
//R2: ALTITUDE RATE: 00271 FT/SEC
//R3: COMPUTED ALTITUDE 00250 FT/SEC
SLE_5.ENABLED = TRUE
SLE_6.ENABLED = TRUE

	
	DO UNTIL (D_REG_3 = 0) //DECREMENT ALTITUDE RATE AT A SLOW INCREMENT
		
	D_REG_1 = D_REG_1 - .350 //FORWARD VELOCITY
	S_OUTPUT1 = STRING(D_REG_1)
	
	IF D_REG_1 >0 THEN
	
	SLE_7.TEXT = "+" + S_OUTPUT1			
		
	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_7.TEXT = S_OUTPUT1 

	END IF
	
	D_REG_2 = D_REG_2 - .350 //ALTITUDE RATE
	
	S_OUTPUT2 = STRING(D_REG_2)	
	
	IF D_REG_2 > 0 THEN
	
	SLE_8.TEXT = "+" + S_OUTPUT2 

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_8.TEXT = S_OUTPUT2 
		
		SLE_14.ENABLED = TRUE //ENABLE THE KEY RELEASE LIGHT TO INDICATE SWITCH TO ANOTHER PROGRAM

	END IF	
	
		D_REG_3 = D_REG_3 - .5	//COMPUTED ALTITUDE
	
		S_OUTPUT3 = STRING(D_REG_3)	//CAST THE STRING VARIABLE TO D_REG_1 YOU CREATED SO YOU CAN OUTPUT IT
 
	IF D_REG_3 > 0 THEN
	
	SLE_9.TEXT = "+" + S_OUTPUT3 

	ELSE //WINDOWS KNOWS IT'S A NEGATIVE VALUE
		SLE_9.TEXT = S_OUTPUT3 	

	END IF	

//HERE, WE UPDATE THE TIMERS AND FUEL REGISTERS WITHIN THE LOOP BUT OUTSIDE THE +- EVALUATION.
//.2 SEEMS TO SIMULATE ACTUAL SECONDS GOING BY
D_MISSIONTMR = D_MISSIONTMR + 24
D_EVENTTMR = D_EVENTTMR + .5
D_OXIDIZER = D_OXIDIZER -.007
D_FUEL = D_FUEL - .02
D_HELIUM = D_HELIUM -.02

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = ("0"+S_MISSIONTMR) //STICK A STRING 0 IN THERE SO THE REGISTER LOOKS GOOD

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

//DECREMENT OXIDIZER
S_OXIDIZER = STRING (D_OXIDIZER)
SLE_64.TEXT = (S_OXIDIZER) 

//DECREMENT FUEL
S_FUEL = STRING (D_FUEL)
SLE_65.TEXT = (S_FUEL) 

//DECREMENT HELIUM
S_HELIUM = STRING (D_HELIUM)
SLE_67.TEXT = (S_HELIUM) 

 	//FUEL CZECH
	IF D_FUEL < 10 THEN
	OPEN (W_CRASH)
	//CLOSE (W_MAIN)
	END IF

MLE_1.TEXT = ""

mle_1.text = "       "+ "COMP" +  " ACTY"
				
LOOP	
	
	MLE_1.ENABLED = FALSE //SHUT OFF COMP ACTY AFTER PROGRAM EXECUTION
	SLE_45.ENABLED = TRUE //ENABLE CONTACT LIGHT
	
//SINCE WE'VE LANDED WE ARE NO LONGER GETTING RADAR OR VELOCITY READINGS
//SO THE ALT AND VEL LIGHTS WILL ILLUMIATE ON CONTACT
SLE_19.ENABLED = TRUE
SLE_21.ENABLED = TRUE
	
//UPDATE THE HOLD REGISTERS IN CASE OF RSET
//THE SYSTEM WILL PICK UP IN ITS LAST KNOWN GOOD STATE
//USING THE REGISTER VALUES OF THE LAST SUCCESSFULLY RUN PRO BEFORE THE OP ERR. 
S_PRO = SLE_2.TEXT
S_VERB = SLE_5.TEXT
S_NOUN = SLE_6.TEXT

S_2IV6N62_R1 = SLE_7.TEXT
S_2IV6N62_R2 = SLE_8.TEXT
S_2IV6N62_R3 = SLE_9.TEXT

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)
	
	//AND ZERO OUT THE REGISTERS TO INDICATE LANDING
	
	SLE_7.TEXT = ("00000")
	SLE_8.TEXT = ("00000")
	SLE_9.TEXT = ("00008")
	
	SLE_48.TEXT = ""
   SLE_48.REPLACETEXT ("CONTACT LIGHT")
	
	P_9.VISIBLE = FALSE //HIDE END 64
	P_10.VISIBLE = TRUE //LUNAR LANDING WINDOW
	
	//PUT SLE 7,8,9 TO ALL ZEROES UPON LANDING
	
	//NOW WE BEGIN THE QUICK LANDING CHECKLIST SEQUENCE
	SLE_72.TEXT = ""
	SLE_74.TEXT = ""
	
	SLE_72.TEXT = "ENGINE STOP"
	SLE_74.TEXT = "OK ENGINE STOP"
	
	CB_22.ENABLED = TRUE
	SLE_14.ENABLED = TRUE
	
	END IF 

ELSE	
	
	//PILOT ENTRY ERROR
	SLE_16.ENABLED = TRUE //ENABLE OP_ERR
	
END IF //ENDS TO PRO EVALUATION 



	




