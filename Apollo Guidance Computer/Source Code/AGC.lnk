//ENTR KEY

//MLE_1.ENABLED = TRUE //ENABLE THE COMP ACTY LIGHT

//WE ARE READY TO PROCEED WITH THE INSTRUCTIONS WE HAVE ENTERED INTO THE PRO, VERB AND NOUN REGISTERS.
//THE ENTR WILL LOAD THE PRE-DETERMINED VALUES OF THE PROGRAM TO THE REGISTERS AND
//UPDATE WHAT DATATYPE THE REGISTERS ARE DISPLAYING. 

STRING S_PROG 
STRING S_VERB 
STRING S_NOUN 
STRING S_REG1 
STRING S_REG2 
STRING S_REG3

//DOUBLE TIMERS
DOUBLE D_MISSIONTMR
DOUBLE D_EVENTTMR = 0000

//STRING TIMERS
STRING S_MISSIONTMR
STRING S_EVENTTMR

STRING S_PRO
STRING S_2IV6N62_R1 
STRING S_2IV6N62_R2 
STRING S_2IV6N62_R3

//UPDATE THE MISSION TIMER AND FUEL HOLDS
STRING S_MISSIONTMRH 
STRING S_EVENTTMRH 
STRING S_OXIDIZERH 
STRING S_FUELH 
STRING S_HEDLIUMH

S_MISSIONTMR = SLE_53.TEXT

D_MISSIONTMR = DOUBLE (S_MISSIONTMR)

S_PROG = SLE_2.TEXT //PROGRAM STRING
S_VERB = SLE_5.TEXT //VERB STRING
S_NOUN = SLE_6.TEXT //NOUN STRING
S_REG1 = SLE_7.TEXT //REGISTER 1 STRING
S_REG2 = SLE_8.TEXT //REGISTER 2 STRING
S_REG3 = SLE_9.TEXT //REGISTER 3 STRING

//NEXT RE-ENABLE THE VERB AND NOUN KEYS FOR THE NEXT PROGRAM CYCLE
CB_1.ENABLED = TRUE //VERB
CB_2.ENABLED = TRUE

P_19.VISIBLE = TRUE
P_3.VISIBLE = FALSE

//NEXT ORDER OF HOUSEKEEPING IS TO DISABLE THE NOUN FIELD SINCE IT WAS THE LAST ACTIVE FIELD
SLE_6.ENABLED = FALSE

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//V37 ENABLES THE OPERATOR TO CHANGE PROGRAMS

IF SLE_14.ENABLED = TRUE THEN

MESSAGEBOX("KEY REL", "PLEASE PRESS KEY REL")

ELSEIF (S_VERB = "37") THEN	
	
	SLE_2.ENABLED = TRUE //ENABLE THE PROGRAM REGISTER
	SLE_2.SETFOCUS()//AND SET FOCUS TO PROG TO ENTER NEW PROGRAM. IN THIS CASE, P63
	SLE_2.TEXT = "" //CLEAR THE TEXT
	SLE_5.TEXT = "00" //SET VERB TO 00. IT'LL BE REPLACED WHEN ENTR IS PRESSED AFTER P63
	SLE_6.TEXT = "00" //PDI INITIALIZATION REQUIRES NOUN TO BE ZEROED	

//OTHERWISE, START TO GRAB USER INPUT TO START A PROGRAM/VERB/VERB+NOUN
	/*
	PAGE 274 AGC. TIME TO LANDING 0:30
	P27 LGC UPLINK FROM GROUND
   V71 START LGC UPLINK, BLOCK ADDRESS
	N69 LANDING SITE CORRECTION
	REG 1: Z 00000FT
	REG 2: Y 00000FT
	REG 3: X 00000FT
	ACTIVATE UPLINK LIGHT
	*/

ELSEIF (S_PROG = "27") THEN	

	SLE_5.TEXT = "71"
	SLE_6.TEXT = "69"
	
	sle_2.enabled = TRUE
	sle_5.enabled = TRUE
	sle_6.enabled = TRUE
	
	CB_16.ENABLED = TRUE //ENABLE PRO 1 - THIS FIXES A MASTER RESET BUG
	
	//UPDATE THE REGISTERS WITH PROGRAM START DATA
	SLE_7.TEXT = "" //Z
	SLE_8.TEXT = "" //X
	SLE_9.TEXT = "" //Y
	
	
	SLE_24.TEXT = "(Z) LANDING SITE CORR"
	SLE_26.TEXT = "(Y) LANDING SITE CORR"
	SLE_28.TEXT = "(X) LANDING SITE CORR"
	
	SLE_48.TEXT = "P27 TELEMETRY UPLINK"
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
ELSEIF (S_PROG = "06") THEN //MASTER RESET TO START OVER AFTER MAJOR FAIL
	
W_MAIN.SLE_45.ENABLED = FALSE //DISABLE CONTACT LIGHT
W_MAIN.SLE_69.TEXT = ""
W_MAIN.P_5.VISIBLE = TRUE

	
//ENABLE ENTR AND PRO KEYS
//IN CASE THEY'RE DISABLED BY ANY STEP THAT WOULD DISABLE IT
//BUT! IF WE DON'T HIDE THE 2ND PRO AND ENTR, THEY WILL BE THE PRE-EMINENT ONES SINCE THEY WERE
//LAST ACTIVATED AND WE'LL GET AN OP ERR. MAKE SURE THEY'RE ENABLED TOO.
W_MAIN.CB_16.VISIBLE = TRUE
W_MAIN.CB_16.ENABLED = TRUE
W_MAIN.CB_19.VISIBLE = TRUE
W_MAIN.CB_19.ENABLED = TRUE

//THE 2ND PRO AND ENTR SHOULD BE HEARD BUT NOT SEEN
W_MAIN.CB_23.VISIBLE = FALSE
W_MAIN.CB_23.ENABLED = TRUE
W_MAIN.CB_24.VISIBLE = FALSE
W_MAIN.CB_24.ENABLED = TRUE
	
W_MAIN.CB_20.SETFOCUS()

W_MAIN.SLE_70.ENABLED = TRUE

W_MAIN.SLE_28.ENABLED = TRUE
W_MAIN.SLE_26.ENABLED = TRUE
W_MAIN.SLE_24.ENABLED = TRUE

//PUT 8 BALL BACK TO ORINGINAL STATE
W_MAIN.P_3.ENABLED = FALSE
W_MAIN.P_19.ENABLED = TRUE

SLE_48.TEXT= ""
SLE_48.TEXT = "P06 HARD RESTART"

//PUT 8 BALL BACK TO ORINGINAL STATE
W_MAIN.P_3.ENABLED = FALSE
W_MAIN.P_19.ENABLED = TRUE

//ADJUST WARNING LIGHTS AS NEEDED 
W_MAIN.SLE_14.ENABLED = TRUE
W_MAIN.SLE_16.ENABLED = FALSE

W_MAIN.SLE_19.ENABLED = FALSE

SLE_7.TEXT = "RESTART"
CB_20.SETFOCUS()

//ENABLE VERB NOUN
CB_1.ENABLED = TRUE
CB_2.ENABLED = TRUE

DOUBLE D_COUNTRESET = 2000


DO UNTIL (D_COUNTRESET = 0)
	
	//THIS IS STATIC AS DEFINED BY THE OBJECT BUT TO SIMULATE A RESET LOOP WE'LL BLANK IT 
   //AND FILL IT WITHIN THE LOOP SO IT FLASHES

	W_MAIN.SLE_15.ENABLED = TRUE //RESET ON
	D_COUNTRESET = D_COUNTRESET - 1
	
	W_MAIN.SLE_15.TEXT = ""
	W_MAIN.SLE_15.TEXT = "RESTART"
	
LOOP

SLE_48.TEXT = ""

W_MAIN.SLE_15.ENABLED = FALSE //AND DISABLE AFTER TERMINATION

W_MAIN.MLE_4.ENABLED = FALSE
W_MAIN.MLE_5.ENABLED = FALSE
W_MAIN.SLE_23.ENABLED = TRUE

//CLEAR THE DSKY REGISTERS
W_MAIN.SLE_2.TEXT = ""
W_MAIN.SLE_5.TEXT = ""
W_MAIN.SLE_6.TEXT = ""
W_MAIN.SLE_7.TEXT = ""
W_MAIN.SLE_8.TEXT = ""
W_MAIN.SLE_9.TEXT = ""

//CLEAR THE MISSION + FUEL REGISTERS 
W_MAIN.SLE_53.TEXT = ""
W_MAIN.SLE_58.TEXT = ""
W_MAIN.SLE_64.TEXT = ""
W_MAIN.SLE_65.TEXT = ""

//AND RESTORE THE ORIGINAL REGISTER VALUES
W_MAIN.SLE_2.TEXT = "00"
W_MAIN.SLE_5.TEXT = "00"
W_MAIN.SLE_6.TEXT = "00"
W_MAIN.SLE_7.TEXT = "00000"
W_MAIN.SLE_8.TEXT = "00000"
W_MAIN.SLE_9.TEXT = "00000"

//AND RESTORE THE ORIGINAL REGISTER VALUES
W_MAIN.SLE_53.TEXT = "0975837"
W_MAIN.SLE_58.TEXT = "0000"


//RESTORE FUEL REGISTERS
W_MAIN.SLE_64.TEXT = "95"
W_MAIN.SLE_65.TEXT = "95"
W_MAIN.SLE_67.TEXT = "2807"

W_MAIN.SLE_12.ENABLED = TRUE

//DISABLE ACA KEYS
W_MAIN.P_1.ENABLED = FALSE
W_MAIN.P_2.ENABLED = FALSE
W_MAIN.P_4.ENABLED = FALSE

/*
W_MAIN.SLE_45.ENABLED = FALSE
W_MAIN.SLE_70.ENABLED = FALSE
W_MAIN.SLE_69.ENABLED = FALSE
W_MAIN.SLE_75.ENABLED = FALSE
W_MAIN.SLE_76.ENABLED = FALSE
W_MAIN.SLE_78.ENABLED = FALSE
W_MAIN.SLE_79.ENABLED = FALSE
W_MAIN.SLE_81.ENABLED = FALSE
W_MAIN.SLE_77.ENABLED = FALSE
W_MAIN.SLE_38.ENABLED = FALSE
W_MAIN.SLE_37.ENABLED = FALSE


W_MAIN.SLE_36.ENABLED = FALSE
W_MAIN.SLE_39.ENABLED = FALSE
W_MAIN.SLE_40.ENABLED = FALSE
W_MAIN.SLE_41.ENABLED = FALSE
W_MAIN.SLE_28.ENABLED = FALSE
W_MAIN.SLE_26.ENABLED = FALSE
W_MAIN.SLE_24.ENABLED = FALSE
//W_MAIN.SLE_14.ENABLED = FALSE
W_MAIN.SLE_16.ENABLED = FALSE
W_MAIN.SLE_19.ENABLED = FALSE
*/

SLE_75.ENABLED = FALSE
SLE_76.ENABLED = FALSE
SLE_75.TEXT = ""
SLE_76.TEXT = ""

SLE_72.TEXT =""
SLE_74.TEXT =""

SLE_72.TEXT ="V37E 27E PRO"
SLE_74.TEXT ="UPDATE FROM MSFN | 0:30 TO LAND"

SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""
SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""
SLE_77.TEXT = ""
SLE_78.TEXT = ""
SLE_79.TEXT = ""
SLE_80.TEXT = ""
SLE_81.TEXT = ""
ST_14.TEXT = ""
ST_14.TEXT = "LANDING VECTOR MAGNITUDE"
RB_12.TEXT = ""
RB_12.TEXT = "DESC ENG OVR"
RB_14.TEXT = ""
RB_14.TEXT = "DESC ENG ARM"

ST_14.TEXT = ""
ST_14.TEXT = "BRAKING VECTOR MAGNITUDE"

W_MAIN.TITLE = "Apollo Guidance Computer v1.87 - Landing Mode"

P_3.VISIBLE = FALSE
P_19.VISIBLE = TRUE

GB_17.TEXT = "LUNAR CONTACT"

SLE_64.TEXT = ""
SLE_65.TEXT = ""
SLE_67.TEXT = ""

//RESTORE FUEL REGISTERS
SLE_64.TEXT = "95"
SLE_65.TEXT = "95"
SLE_67.TEXT = "2807"
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	


ELSEIF (S_VERB = "00") AND (S_NOUN = "00") AND (S_PROG = "63")  THEN
	
	//V06 N33	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	SLE_5.TEXT = "06"
	SLE_6.TEXT = "61"
	
	//UPDATE THE REGISTERS WITH PROGRAM START DATA
	SLE_7.TEXT = "-0950" //TIME TO GO IN BRAKING PHASE = DECREMENT
	SLE_8.TEXT = "-0250" //TIME FROM IGNITION -02 50 = DECREMENT
	SLE_9.TEXT = "0005" //CROSSRANGE DISTANCE = INCREMENT
	
	//UPDATE THE REGISTER TASK STATUS
	SLE_24.TEXT = ("TIME IN BRAKING PHASE")
	SLE_26.TEXT = ("TIME TO IGNITION")
	SLE_28.TEXT = ("CROSSRANGE DISTANCE")
	
	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
//#TODO OTHER PROGRAMS HERE DURING THE LANDING SEQUENCE AND SEND THEIR OUTPUTS TO THE REGISTERS.
//FROM THERE THE PRO KEY WILL DETERMINE WHICH LANDING PROGRAM TO RUN.

//PROGRAM 63 SIMULATES THE BRAKING PHASE OF THE LEM
//P63 WILL STILL BE IN THE PRO FIELD. WHILE OTHER V,N RUN. 
//NEXT STEP IS TO SIMULATE TIME TO IGNITION. ACTIVATE THIS BY USING THE KEY REL
ELSEIF (S_VERB = "") OR (S_NOUN = "33") AND (S_PROG = "63")THEN
	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
	IF RB_11.CHECKED = FALSE THEN
	
	MESSAGEBOX("PUT LANDING RADAR INTO SLEW", "RADAR SLEW")
	
ELSE

//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")


	//V00 N33
	SLE_5.REPLACETEXT ("00")
	SLE_6.REPLACETEXT ("33")
	
	//UPDATE THE REGISTERS WITH PROGRAM START DATA
	SLE_7.REPLACETEXT ("+00102") //HOUR
	SLE_8.REPLACETEXT ("+00040") //MIN
	SLE_9.REPLACETEXT ("+05477") //SEC

	SLE_14.ENABLED = TRUE //ENABLE THE KEY REL TO GO TO NEXT PROGRAM PHASE
	
	//UPDATE THE REGISTER TASK STATUS
	SLE_24.TEXT = ("HOUR")
	SLE_26.TEXT = ("MIN")
	SLE_28.TEXT = ("SEC")	

//UPDATE REGISTER HOLDS
SLE_39.REPLACETEXT ("63") //PROGRAM
SLE_40.REPLACETEXT ("06") //VERB
SLE_41.REPLACETEXT ("33") //NOUN

SLE_36.REPLACETEXT ("00102") //R1
SLE_37.REPLACETEXT ("000 40") //R2
SLE_38.REPLACETEXT ("0054") //R3

	
	//MESSAGEBOX("ENFORCE PROCEDURES", "ENTER V50,N25, CORRECT BURN ATTITUDE")
	
//MISSION PROCEDURES
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL V50 N25E")
SLE_74.REPLACETEXT ("CORRECT BURN ATTITUDE")

	CB_16.ENABLED = FALSE //DISABLE THE PRO KEY

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE //PRO
	
END IF
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//V50 N25	
ELSEIF (S_NOUN = "25")THEN
	
	//SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")	
	
	SLE_7.REPLACETEXT ("00 14")
	SLE_24.REPLACETEXT("RCS FIRES FROM CHKLST")
	SLE_14.ENABLED = TRUE //ENABLE KEY REL
	
SLE_39.REPLACETEXT ("63")
SLE_40.REPLACETEXT ("50")
SLE_41.REPLACETEXT ("25")

SLE_36.REPLACETEXT ("00 14")

	//MESSAGEBOX("ENFORCE PROCEDURES", "ENTER V50,N18, AUTOMANEUVER FDAI BALL ANGLES")
SLE_72.TEXT = ""
SLE_74.TEXT = ""
SLE_72.REPLACETEXT ("KEY REL V50 N18 AGS CLS+E PRO")
SLE_74.REPLACETEXT ("AUTOMANEUVER 8 BALL ANGLES")
	
	
	//ENABLE PRO KEY
	CB_16.ENABLED = TRUE
	
	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = TRUE //ENTR
	CB_16.ENABLED = FALSE //PRO
		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//V50 N18	
ELSEIF (S_NOUN = "18")THEN
	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
		IF RB_16.CHECKED = FALSE THEN
	//THERE'S JUST TOO MUCH GOING ON DURING POWERED DESCENT, FLIPPING SWITCHES......ETC
	//SOOOOOO....AGS CAN BE ENABLED AT DIFFERENT V,N STATES. 
	//PB ONLY ALLOWS 1 RADIO BUTTON TO BE CLIKED AT THE SAME TIME
	//ALL THE OTHER V,N HAVE A RADIO BUTTON TO CLICK BEFORE THAT PROCEDURE
	//SO WE HAVE TO KIND OF FUDGE AGS ACTIVATTION AT V50, N18
	//ACCORING TO MIKE STEWART, AGS CAN BE ANABLED AT DIFFERENT TIMES IN THE PDI PHASE.
	//AND ON CERTAIN OCCASIONS, ITS OK TO FORGET A STEP AS LONG AS IT DOESN'T AFFECT LANDING
	MESSAGEBOX("ENABLE AGS", "AGS TO CLS")
	
ELSE
	
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")
	
	SLE_7.REPLACETEXT ("17980")//ROLL
	SLE_8.REPLACETEXT ("28596")//PITCH
	SLE_9.REPLACETEXT ("00098")//YAW
		
	SLE_24.REPLACETEXT("ROLL +-Y")
	SLE_26.REPLACETEXT("PITCH +-Z")
	SLE_28.REPLACETEXT("YAW +-X")

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO
	
END IF

/////////////////////////////////////////////////////////////////////////////////////////////	
//V06 N62	
ELSEIF (S_NOUN = "62")THEN
	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
	IF RB_14.CHECKED = FALSE THEN
	
	MESSAGEBOX("ARM DESCENT ENGINE", "DESC ENG ARM")	

ELSE
	
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")

	SLE_7.REPLACETEXT ("55684")//VELOCITY FT/SEC
	SLE_8.REPLACETEXT ("0105")//TIME TO IGNITION
	SLE_9.REPLACETEXT ("0008")//DELTA V FT/SEC - IMPORTANT TO GET SIMULATION RIGHT
	//SLE_14.ENABLED = TRUE //ENABLE KEY REL
	
	SLE_24.REPLACETEXT("VELOCITY FT/SEC")
	SLE_26.REPLACETEXT("TIME TO IGNITION")
	SLE_28.REPLACETEXT("DELTA V FT/SEC")

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO

END IF
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	//AT THIS POINT WE ARE AT PRO 63 | V06 | N63 
	ELSEIF (S_NOUN = "63")THEN
		
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
		
IF RB_12.CHECKED = FALSE THEN
	
	MESSAGEBOX("ENABLE DESCENT ENGINE OVERRIDE", "DESC ENG OVR")
	
ELSE
		
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")

	SLE_7.REPLACETEXT ("54505")//DELTA ALTITUDE FT FROM SURFACE 
	SLE_8.REPLACETEXT ("00030")//ALTITUDE RATE - COUNT UP
	SLE_9.REPLACETEXT ("46735")//COMPUTED ALTITUDE - COUNT DOWN 
	//SLE_14.ENABLED = TRUE //ENABLE KEY REL
	
	SLE_24.REPLACETEXT("DELTA ALTITUDE FT")
	SLE_26.REPLACETEXT("ALTITUDE RATE")
	SLE_28.REPLACETEXT("COMPUTED ALTITUDE")

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO
	
END IF 


///////////////////////////////////////////////////////////////////////////////////////////	
//N68 
	ELSEIF (S_NOUN = "68")THEN //WE USE V16 TWICE FOR LANDING
		
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
		
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")
	
	IF RB_20.CHECKED = TRUE THEN //ARE WE IN ATT HOLD MAN?
	
	//YES, WE ARE WINDING DOWN BRAKING PHASE AND GOING INTO P64
	SLE_7.REPLACETEXT ("+00168")//GROUND RANGE TO LANDING SITE (DECREMENT NAUTICAL MILES)
	//THIS IS WHAT WE'LL COUNT DOWN TO ZERO ON PRO
	SLE_8.REPLACETEXT ("+0272")//TIME LEFT IN BRAKING PHASE COUNTDOWN DECREMENT	
	SLE_9.REPLACETEXT ("+00126")//DELTA H
	//SLE_14.ENABLED = TRUE //ENABLE KEY REL
	
	SLE_24.REPLACETEXT("GROUND RANGE FT")
	SLE_26.REPLACETEXT("TIME LEFT BRAKING")
	SLE_28.REPLACETEXT("DELTA H")
	
	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO

ELSE
	
//WERE FLYING IN V16, N63 1ST PHASE
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")
		
	SLE_7.REPLACETEXT ("+00582")//GROUND RANGE TO LANDING SITE (DECREMENT NAUTICAL MILES)
	SLE_8.REPLACETEXT ("+04028 ")//TIME LEFT IN BRAKING PHASE COUNTDOWN DECREMENT
	SLE_9.REPLACETEXT ("03828")//DELTA H
	
	SLE_24.REPLACETEXT("GROUND RANGE FT")
	SLE_26.REPLACETEXT("TIME LEFT BRAKING")
	SLE_28.REPLACETEXT("DELTA H")
	
	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO

END IF
	

	SLE_14.ENABLED = FALSE //DISABLE KEY REL
	
	ELSEIF (S_VERB = "57")THEN //WE ONLY USE V57 ONCE 
		
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE

	//UPDATE V, N HERE
	SLE_6.REPLACETEXT ("68")//KEEP N68 FOR RADAR UPDATES
	
	SLE_7.TEXT = ""
	SLE_8.TEXT = ""
	SLE_9.TEXT = ""
	
	SLE_7.REPLACETEXT ("+24000")//DELTA ALTITUDE
	SLE_8.REPLACETEXT ("+01148")//ALTITUDE RATE
	SLE_9.REPLACETEXT ("+33000")//COMPUTED ALTITUDE	

	//I DON'T KNOW WHY WE HAVE TO BLANK THE REGISTERS BEFORE RAPLACETEXT
	SLE_24.TEXT = ""
	SLE_26.TEXT = ""
	SLE_28.TEXT = ""
	
	//BUT I GUESS WE DO. 
	SLE_24.REPLACETEXT("DELTA ALTITUDE")
	SLE_26.REPLACETEXT("ALTITUDE RATE")
	SLE_28.REPLACETEXT("COMPUTED ALTITUDE")
	
	CB_16.ENABLED = TRUE
	CB_19.ENABLED = FALSE
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//26.	AS SOON AS WE GET TO T-1:00 IN BRAKING PHASE, AUTOMATICALLY SWITCH TO P64 V6 N64 APPROACH PHASE
//R1: TIME LEFT FOR REDESIGNATIONS: SEC/DEG 99 30 DECREMENT
//R2: ALTITUDE RATE FT/SEC 0912 DECREMENT
//R#: COMPUTED ALTITUDE: 07664 FT DECREMENT
	
ELSEIF (S_NOUN = "64")THEN //WE ONLY USE N64 ONCE
	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
		
//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")

	SLE_6.REPLACETEXT ("68")//KEEP N68 FOR RADAR UPDATES

	SLE_7.TEXT = ""
	SLE_8.TEXT = ""
	SLE_9.TEXT = ""
	
	SLE_7.REPLACETEXT ("+7202")//LPD ANGLE 
	SLE_8.REPLACETEXT ("+01148")//ALTITUDE RATE
	SLE_9.REPLACETEXT ("+7000")//COMPUTED ALTITUDE
	

//I DON'T KNOW WHY WE HAVE TO BLANK THE REGISTERS BEFORE REPLACETEXT
	SLE_24.TEXT = ""
	SLE_26.TEXT = ""
	SLE_28.TEXT = ""
	
	//BUT I GUESS WE DO. 
	SLE_24.REPLACETEXT("LPD ANGLE")
	SLE_26.REPLACETEXT("ALTITUDE RATE")
	SLE_28.REPLACETEXT("COMPUTED ALTITUDE")

	CB_19.ENABLED = FALSE
	CB_16.ENABLED = TRUE

ELSEIF (S_VERB = "57")THEN //WE ONLY USE V57 ONCE
	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
			
	//UPDATE V, N HERE
	SLE_6.REPLACETEXT ("68")//KEEP N68 FOR RADAR UPDATES
	
	SLE_7.TEXT = ""
	SLE_8.TEXT = ""
	SLE_9.TEXT = ""
	
	SLE_7.REPLACETEXT ("+24000")//DELTA ALTITUDE
	SLE_8.REPLACETEXT ("+01148")//ALTITUDE RATE
	SLE_9.REPLACETEXT ("+33000")//COMPUTED ALTITUDE
	

	//I DON'T KNOW WHY WE HAVE TO BLANK THE REGISTERS BEFORE RAPLACETEXT
	SLE_24.TEXT = ""
	SLE_26.TEXT = ""
	SLE_28.TEXT = ""
	
	//BUT I GUESS WE DO. 
	SLE_24.REPLACETEXT("DELTA ALTITUDE")
	SLE_26.REPLACETEXT("ALTITUDE RATE")
	SLE_28.REPLACETEXT("COMPUTED ALTITUDE")

	//AND UPDATE ENTER AND PROCEED
	CB_19.ENABLED = FALSE //ENTR
	CB_16.ENABLED = TRUE //PRO
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
//R1: FORWARD VELOCITY: 00021 FT/SEC
//R2: ALTITUDE RATE: 00032 FT/SEC
//R3: COMPUTED ALTITUDE 00027 FT/SEC
//P66, V06, N60

ELSEIF (S_NOUN = "60")THEN
	// ((RB_22.CHECKED)OR(RB_23.CHECKED)) //ROD SWITCHES
	//
	//SLE_75.ENABLED = FALSE THEN
	
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
IF  ((SLE_75.ENABLED  = FALSE )OR (SLE_76.ENABLED = FALSE)) THEN //CZECH TO SEE IF ATT HOLD AND ROD-U/D IS ENABLED

	MESSAGEBOX("MUST ENABLE ROD", "TOGGLE ROD U/D TO START P66") //CZECH FOR ROD SWITCH
	
	 ELSE
	
CB_16.ENABLED = TRUE //PRO

//CLEAR REGISTER HOLDS
SLE_36.TEXT = ("")
SLE_37.TEXT = ("")
SLE_38.TEXT = ("")
SLE_39.TEXT = ("")
SLE_40.TEXT = ("")
SLE_41.TEXT = ("")

//AND THE MISSION + FUEL HOLDS
SLE_77.TEXT = ("")
SLE_81.TEXT = ("")
SLE_78.TEXT = ("")
SLE_79.TEXT = ("")
SLE_80.TEXT = ("")
	
	SLE_7.REPLACETEXT ("+00360")//FORWARD VELOCITY
	SLE_8.REPLACETEXT ("+00371")//ALTITUDE RATE
	SLE_9.REPLACETEXT ("+00450")//COMPUTED ALTITUDE 
	
	SLE_24.REPLACETEXT("FORWARD VELOCITY FT/SEC")
	SLE_26.REPLACETEXT("ALTITUDE RATE")
	SLE_28.REPLACETEXT("COMPUTED ALTITUDE")
	
	CB_16.ENABLED = FALSE
	CB_19.ENABLED = FALSE

END IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//POST LANDING OPERATIONS

ELSEIF (S_PROG = "68") THEN
	
	SLE_48.TEXT = ""
	SLE_48.TEXT = "P68 LANDING COORDINATES" 
		
	SLE_5.TEXT = ("06")
	SLE_6.ENABLED = TRUE
	SLE_6.TEXT = ("89")
	
	CB_16.ENABLED = TRUE
	
	//MLE_9.ENABLED = TRUE //ENABLE UPLINK LIGHT
	
	//BLANK THE REGISTERS. 
	SLE_7.TEXT = ""
	SLE_8.TEXT = ""
	SLE_9.TEXT = ""
	
	//BLANK AND UPDATE THE REGISTER TASKS
	SLE_24.TEXT = ""
	SLE_26.TEXT = ""
	SLE_28.TEXT = ""
	
	SLE_24.TEXT = "DEG LANDING LATTD +N"
	SLE_26.TEXT = "DEG LANDING LATTD /2 +E"
	SLE_28.TEXT = "LANDMARK ALTITUDE NMI"
	
	
//////////////////////////////////////////////////////////////////////////////////////////////////
//IMU POWERUP INTERRUPT INTEGRATION AND GO TO P00
ELSEIF (S_VERB = "96") THEN
	SLE_2.ENABLED = TRUE
	SLE_2.TEXT = "00"
	SLE_5.TEXT = "" 
	SLE_5.SETFOCUS()
	
	SLE_72.TEXT = ""
	SLE_72.TEXT = "KEY REL SWITCH IMU CAGE TO CLS"
	SLE_74.TEXT = ""
	SLE_74.TEXT = "TURN ON IMU AND SYNC LGC"
	
	SLE_14.ENABLED = TRUE
	
//V16, N65 ACTIVATES THE DSKY AND PUTS IN LAST KNOWN GOOD STATE FOR TIMERS AND FUEL	
ELSEIF (S_NOUN = "65") THEN	
	
	SLE_2.TEXT = "00"
	CB_20.SETFOCUS()
	
	DOUBLE D_TIMERUPLINK = 0	
	
	//LOOP A COMP ACTY AND UPLINK LIGHT SINCE WE ARE FETCHING THE MISSION TIME AND LOADING IT TO THE AGC
	DO UNTIL D_TIMERUPLINK = 2000
		
	D_TIMERUPLINK = D_TIMERUPLINK +1	
	
	MLE_9.ENABLED = TRUE //ENABLE UPLINK LIGHT
	MLE_9.TEXT = ""
	mle_9.text = + "UPLINK" +  " ACTY" //"       " 7 spaces is width of control
	
	  //COMP ACTY
	  MLE_1.ENABLED = TRUE
	  MLE_1.TEXT = ""
	  mle_1.TEXT = "       "+ "COMP" +  " ACTY"	  	  
  	
	LOOP	
	
	SLE_13.ENABLED = FALSE //PROG LIGHT OFF AFTER AGC/IMU SYNC

//MISSION TIMER
SLE_58.TEXT = "0000"

	//HOURS
	SLE_7.TEXT = ""
	SLE_7.TEXT = "00185"
	SLE_24.TEXT = ""
	SLE_24.TEXT = "00HHH"
	
	//MINUTES
	SLE_8.TEXT = ""
	SLE_8.TEXT = "00059"
	SLE_26.TEXT = ""
	SLE_26.TEXT = "000MIN"
	
	//SECONDS
	SLE_9.TEXT = ""
	SLE_9.TEXT = "00037"
	SLE_28.TEXT = ""
	SLE_28.TEXT = "000SEC"
	
   //ALSO, UPDATE THE MISSION TIMER REGISTER WITH 1855937
	SLE_53.TEXT = ""	
	SLE_53.TEXT = "1855937"
	
	//AGC IS UP SO WE LOAD LAST KNOWN QTY TO FUEL REGISTERS
	SLE_64.TEXT = ""
	SLE_64.TEXT = "36.2" //OXIDIZER
	
	SLE_65.TEXT = ""
	SLE_65.TEXT = "26.6" //FUEL
	
	SLE_67.TEXT = ""
	SLE_67.TEXT = "1075"	//HELIUM
	
//UPDATE REGISTER HOLDS WITH FUEL
S_PRO = SLE_2.TEXT //PRO
S_VERB = SLE_5.TEXT //VERB
S_NOUN = SLE_6.TEXT //NOUN

S_2IV6N62_R1 = SLE_7.TEXT //R1
S_2IV6N62_R2 = SLE_8.TEXT //R2
S_2IV6N62_R3 = SLE_9.TEXT //R3

SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""

SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""
SLE_77.TEXT = ""
SLE_81.TEXT = ""

SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER AND FUEL HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT
S_OXIDIZERH = SLE_64.TEXT
S_FUELH = SLE_65.TEXT
S_HEDLIUMH = SLE_67.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)
SLE_78.REPLACETEXT (S_OXIDIZERH)
SLE_79.REPLACETEXT (S_FUELH)
SLE_80.REPLACETEXT (S_HEDLIUMH)
	
	MLE_9.ENABLED = FALSE
	
	//ENABLE KEY REL
	SLE_14.ENABLED = TRUE
	
	SLE_72.TEXT = ""
	SLE_74.TEXT = ""
	
	SLE_72.TEXT = "KEY REL V25 N01E 1365+E"
	SLE_74.TEXT = ""
	SLE_74.TEXT = "LOAD FRACTIONALS IN R1, R2, R3"
	
//V25, N01 1365E IN R1, UPDATE 2 AND 3 WITH SAME NUMBER ON CLICK
ELSEIF (S_VERB = "25") THEN
	
	//SLE_2.ENABLED = TRUE
	SLE_7.SETFOCUS()
	
	//SLE_7.TEXT = "1365"
	
	//WE CAN PRESS ENTER A 2ND TIME TO P0PULATE R2, AND R3 BUT CAN'T DO 3 CLICKS
	//PER THE CUE CARD
		IF SLE_7.TEXT = "1365" THEN
		
		SLE_8.TEXT = "1365"
		SLE_9.TEXT = "1365"
	   
		//ENABLE KEY REL
		SLE_14.ENABLED = TRUE
		CB_19.ENABLED = FALSE
		SLE_16.ENABLED = FALSE //TURN OFF THE OP ERR LIGHT
		
		SLE_72.TEXT = ""
		SLE_72.TEXT = "KEY REL V15 N01E 1365+E" 
		
		SLE_74.TEXT = ""
		SLE_74.TEXT = "LOAD FRACTIONALS IN R1"
		
//UPDATE REGISTER HOLDS - NO FUEL

SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""

SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""

SLE_77.TEXT = ""
SLE_81.TEXT = ""

S_PRO = SLE_2.TEXT //PRO
S_VERB = SLE_5.TEXT //VERB
S_NOUN = SLE_6.TEXT //NOUN

S_2IV6N62_R1 = SLE_7.TEXT //R1
S_2IV6N62_R2 = SLE_8.TEXT //R2
S_2IV6N62_R3 = SLE_9.TEXT //R3

//UPDATE THE HOLDS
SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)	

		END IF	
		
		SLE_24.TEXT = ""
		SLE_26.TEXT = ""
		SLE_28.TEXT = ""
		
		SLE_24.TEXT = "FRACTIONALS"
		SLE_26.TEXT = "FRACTIONALS"
		SLE_28.TEXT = "FRACTIONALS"
		
		//SLE_72.TEXT = ""
		//SLE_72.TEXT = "KEY REL V15 N01 ENTR 1365 ENTR"
		
				
	//V15, N01 1365E, THEN ALL ZEROES 
	//MONITOR OCTALS1,2,3 I 3 REGISTERS
	//THIS IS VUTRUALLY IDENTICAL TO 25, 01
	//ONLY WE ZERO OUT THE BOTTOM 2 REGISTERS
	ELSEIF (S_VERB = "15") THEN 
		
	SLE_7.SETFOCUS()
	
		
	//WE CAN PRESS ENTER A 2ND TIME TO P0PULATE R2, AND R3 BUT CAN'T DO 3 CLICKS
	//PER THE CUE CARD
		IF SLE_7.TEXT = "1365" THEN
		
		SLE_8.TEXT = "00000"
		SLE_9.TEXT = "00000"
	   
		//ENABLE KEY REL
		SLE_14.ENABLED = TRUE
		CB_19.ENABLED = FALSE
		SLE_16.ENABLED = FALSE //TURN OFF THE OP ERR LIGHT
		
//UPDATE REGISTER HOLDS - NO FUEL
SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""

SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""

SLE_77.TEXT = ""
SLE_81.TEXT = ""

S_PRO = SLE_2.TEXT //PRO
S_VERB = SLE_5.TEXT //VERB
S_NOUN = SLE_6.TEXT //NOUN

S_2IV6N62_R1 = SLE_7.TEXT //R1
S_2IV6N62_R2 = SLE_8.TEXT //R2
S_2IV6N62_R3 = SLE_9.TEXT //R3


//UPDATE THE HOLDS
SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)			
		
		SLE_72.TEXT = ""
		SLE_72.TEXT = "KEY REL V21 N27E"
		
		SLE_74.TEXT = ""
		SLE_74.TEXT = "INITIALIZE DATA DUMP"		
	
		END IF
		
		SLE_24.TEXT = ""
		SLE_26.TEXT = ""
		SLE_28.TEXT = ""
		
		SLE_24.TEXT = "FRACTIONALS"
		SLE_26.TEXT = "FRACTIONALS"
		SLE_28.TEXT = "FRACTIONALS"

//////////////////////////UPDATE MISSION TIMERS BEGINNING HERE//////////////////////////////////////
//V21, N27E. LOAD COMPONENT 1 INTO R1. SELF-TEST ON/OFF SWITCH
//HERE WE WILL RUN A LOOP IN THE BACKGROUND AND HAVE IT
//TERMINATE WITH A KEY REL AND DEFAULT BACK TO V21, N27 R1 = 0 AT END OF LOOP

ELSEIF S_VERB = "21" THEN
	
	//S_MISSIONTMR = SLE_53.TEXT
	
	CB_20.SETFOCUS()
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
	SLE_7.TEXT = ""
	SLE_7.TEXT = "001365"
	
	SLE_8.TEXT = ""
	SLE_8.TEXT = "00000"
	
	SLE_9.TEXT = ""
	SLE_9.TEXT = "00000"
	
		SLE_24.TEXT = ""
		SLE_26.TEXT = ""
		SLE_28.TEXT = ""
		
		SLE_24.TEXT = "FRACTIONALS"
		SLE_26.TEXT = "FRACTIONALS"
		SLE_28.TEXT = "FRACTIONALS"
	
	
	DOUBLE D_2127LOOP = 0
	
	DO UNTIL D_2127LOOP > 3
		
	D_2127LOOP = D_2127LOOP +.001
	
	SLE_8.TEXT = ""
	SLE_8.TEXT = "0000" + STRING(D_2127LOOP)	
	
	SLE_5.TEXT = ""
	SLE_5.TEXT = "15"
	
	SLE_6.TEXT = ""
	SLE_6.TEXT = "01"
	
		  //COMP ACTY
	  MLE_1.ENABLED = TRUE
	  MLE_1.TEXT = ""
	  mle_1.TEXT = "       "+ "COMP" +  " ACTY"
	  
////////////////////////////////////TIMERS

D_MISSIONTMR = D_MISSIONTMR + 1 

D_EVENTTMR = D_EVENTTMR + .5

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = (S_MISSIONTMR) 

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 
////////////////////////////////////TIMERS

LOOP

//UPDATE REGISTER HOLDS - NO FUEL
SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""

SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""

SLE_77.TEXT = ""
SLE_81.TEXT = ""

S_PRO = SLE_2.TEXT //PRO
S_VERB = SLE_5.TEXT //VERB
S_NOUN = SLE_6.TEXT //NOUN

S_2IV6N62_R1 = SLE_7.TEXT //R1
S_2IV6N62_R2 = SLE_8.TEXT //R2
S_2IV6N62_R3 = SLE_9.TEXT //R3


//UPDATE THE HOLDS
SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)


SLE_14.ENABLED = TRUE //KEY REL	

	SLE_5.TEXT = ""
	SLE_5.TEXT = "21"
	
	SLE_6.TEXT = ""
	SLE_6.TEXT = "27"
	

	SLE_72.TEXT = ""
	SLE_72.TEXT = "KEY REL V74E"
	
	SLE_74.TEXT = ""
	SLE_74.TEXT = "INITIALIZE ERASABLE DOWNLINK"
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////	
//FINAL STEP OF IMU POWER UP
//V74 INITIALIZE ERASABLE DUMP VIA DOWNLINK
//THERE IS NO REGISTER DATA ASSOCIATED WITH THIS VERB	
	
ELSEIF (S_VERB = "74") THEN 
	
	SLE_2.ENABLED = TRUE
	SLE_7.TEXT = ""
	CB_20.SETFOCUS()
	SLE_24.TEXT = "DATA DOWNLINK"
	
	//S_MISSIONTMR = SLE_53.TEXT
	
	DOUBLE D_DUMP = 0
	
	DO UNTIL D_DUMP = 2000
		
		D_DUMP = D_DUMP + 1
		
		SLE_7.TEXT = "+0" + STRING(D_DUMP)
	
	MLE_1.ENABLED = TRUE
	MLE_1.TEXT = ""
	MLE_1.TEXT = "       "+ "COMP" +  " ACTY"
	
	
	//UPLINK
	MLE_9.ENABLED = TRUE //ENABLE UPLINK LIGHT
	MLE_9.TEXT = ""
	mle_9.text = + "UPLINK" +  " ACTY" //"       " 7 spaces is width of control
	
////////////////////////////////////TIMERS		
D_MISSIONTMR = D_MISSIONTMR + 1

D_EVENTTMR = D_EVENTTMR + .5

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = (S_MISSIONTMR) 

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

////////////////////////////////////TIMERS

LOOP	

//UPDATE REGISTER HOLDS - NO FUEL
SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""

SLE_36.TEXT = ""
SLE_37.TEXT = ""
SLE_38.TEXT = ""

SLE_77.TEXT = ""
SLE_81.TEXT = ""

S_PRO = SLE_2.TEXT //PRO
S_VERB = SLE_5.TEXT //VERB
S_NOUN = SLE_6.TEXT //NOUN

S_2IV6N62_R1 = SLE_7.TEXT //R1
S_2IV6N62_R2 = SLE_8.TEXT //R2
S_2IV6N62_R3 = SLE_9.TEXT //R3


//UPDATE THE HOLDS
SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)

		SLE_14.ENABLED = TRUE //KEY REL
	
	SLE_72.TEXT = ""
	SLE_72.TEXT = "KEY REL V34 N99E"
	
	SLE_74.TEXT = ""
	SLE_74.TEXT = "UPLINK LEM STATE VECTOR"
	mle_9.ENABLED = FALSE
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//FROM PP.9 A17 TRANSCRIPT
//P00
//V34 TERMINATE FUNCTION
//N99 1. RMS IN POSITION 00000. FT
	 //2. RMS IN VELOCITY 0000.0 FT/SEC
	 //3. RMS IN BIAS     00000, MILLIRADIANS	
	 
	 //SLE_24,26,28 REGISTER TASKS
	 //SLE_7,8,9 REGISTERS TO UPDATE
	 
//UPDATE 3 REGISTERS WITH STATE VECTORS AFTER LOOP TERMINATION
//DON'T KNOW WHAT RMA STANDS FOR SO DON'T KNOW WHAT VALUES TO ENTER INTO THE REGISTERS AFTER UPLINK
//WE'LL JUST MAKE IT UP
	
	ELSEIF (S_NOUN = "99") THEN
		
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	CB_20.SETFOCUS()
		
//UPDATE 3 REGISTER TASKS WITH STATE VECTORS BEFORE LOOP EXECUTION
SLE_24.TEXT = "RMS IN POSITION FT"
SLE_26.TEXT = "RMS IN VELOCITY FT/SEC"
SLE_28.TEXT = "RMS IN BIAS MILLIRADIANS" 


//CAPTURE THE CURRENT TIME AND PASS IT TO THE VARIABLE TO INCREMENT
D_MISSIONTMR = DOUBLE(SLE_53.TEXT)
		
		DOUBLE D_STATEVECTOR = 0
		
		DO UNTIL D_STATEVECTOR = 2000
			
		D_STATEVECTOR = D_STATEVECTOR + 1
		
		MLE_9.ENABLED = FALSE
		MLE_9.ENABLED = TRUE
		
		MLE_9.TEXT = ""	
		mle_9.text = + "UPLINK" +  " ACTY" //"       " 7 spaces is width of control
		
		MLE_1.ENABLED = FALSE
		MLE_1.ENABLED = TRUE
		
		MLE_1.TEXT = ""
		mle_1.text = "       "+ "COMP" +  " ACTY"
		
////////////////////////////////////TIMERS		
D_MISSIONTMR = D_MISSIONTMR + .3 

D_EVENTTMR = D_EVENTTMR + .5

//INCREMENT MISSION TIMER
S_MISSIONTMR = STRING (D_MISSIONTMR)
SLE_53.TEXT = (S_MISSIONTMR)

//INCREMENT EVENT TIMER
S_EVENTTMR = STRING (D_EVENTTMR)
SLE_58.TEXT = ("0" + S_EVENTTMR) 

////////////////////////////////////TIMERS
				
LOOP

	SLE_7.TEXT = "+01727"
	SLE_8.TEXT = "-03221"
	SLE_9.TEXT = "+32467"	

//UPDATE REGISTER HOLDS - NO FUEL

SLE_39.TEXT = ""
SLE_40.TEXT = ""
SLE_41.TEXT = ""

SLE_77.TEXT = ""
SLE_81.TEXT = ""

S_PRO = SLE_2.TEXT //PRO
S_VERB = SLE_5.TEXT //VERB
S_NOUN = SLE_6.TEXT //NOUN

S_2IV6N62_R1 = SLE_7.TEXT //R1
S_2IV6N62_R2 = SLE_8.TEXT //R2
S_2IV6N62_R3 = SLE_9.TEXT //R3


//UPDATE THE HOLDS
SLE_39.REPLACETEXT (S_PRO)
SLE_40.REPLACETEXT (S_VERB)
SLE_41.REPLACETEXT (S_NOUN)

SLE_36.TEXT = ""
SLE_36.REPLACETEXT (S_2IV6N62_R1)
SLE_37.REPLACETEXT (S_2IV6N62_R2)
SLE_38.REPLACETEXT (S_2IV6N62_R3)

//UPDATE THE MISSION TIMER HOLDS
S_MISSIONTMRH = SLE_53.TEXT
S_EVENTTMRH = SLE_58.TEXT

//AND PUT THEM IN THE HOLDS
SLE_77.REPLACETEXT (S_MISSIONTMRH)
SLE_81.REPLACETEXT (S_EVENTTMRH)	

SLE_72.TEXT = ""
SLE_72.TEXT = "KEY REL V37E P20E PRO"

SLE_74.TEXT = ""
SLE_74.TEXT = "UPLINK CSM STATE VECTOR"

mle_9.enabled = false
SLE_14.ENABLED = TRUE //KEY REL 

/*
P20 REZEVENDOUS NAVIGATION (RUN THIS IN A PRO LOOP TO SIMULATE PERIODIC READINGS. INCREMENT MISSION TIMER BUT NOT EVENT.)
V16 MONITOR DECIMAL
THIS DISPLAYS THE STATE VECTOR OF THE ORBITING CSM.
N91 1. ALTITUDE 00000. NMI
	 2. VELOCITY 00000. FT/SEC
	 3. FLIGHT PATH ANGLE 000.00 DEG

*/

ELSEIF (S_PROG = "20") THEN
	/*
	WE HAVE AN INTERESTING PROBLEM HERE. CB_16 SCRIPT HAS RUN OUT OF SPACE
	"MAXIMUM SCRIPT SIZE EXCEEDED"
	I CREATED THIS SECOND PRO KEY AND MADE ITS VISIBILTY = FALSE
	AND PLACED IT DIRECTLY OVER CB_16 AND DISABLED IT ON THIS CLICK EVENT
	FOR THE REST OF THE ASCENT AND DOCKING, THIS PRO KEY WILL HANDLE THE REST OF THE MISSION
	WHILE CB_16 WILL REMAIN NOT VISIBLE.
	THIS TRICK IS SIMILAR TO SWITCHING IMAGES IN THE LEM WINDOW WITH EACH MANOUVER
	*/
	
	CB_20.SETFOCUS()
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	
	CB_23.VISIBLE = TRUE
	CB_24.VISIBLE = TRUE
	CB_16.VISIBLE = FALSE
	CB_19.VISIBLE = FALSE
	
	SLE_5.TEXT = "16"
	SLE_6.TEXT = "91"
	SLE_6.ENABLED = TRUE
	
	//UPDATE THE REGISTERS WITH CSM STATE VECTORS AS IT ORBITS ABOVE
	//AGAIN, WE'LL HAVE TO MAKE THIS UP SINCE THE BOOK
	//DOESN'T SAY	
		
	SLE_7.TEXT = "" 
	SLE_8.TEXT = "" 
	SLE_9.TEXT = ""
	
	SLE_7.TEXT = "57755" 
	SLE_8.TEXT = "3275" 
	SLE_9.TEXT = "00287"
	
	SLE_24.TEXT = "ALTITUDE NMI"
	SLE_26.TEXT = "VELOCITY FT/SEC"
	SLE_28.TEXT = "FLIGHT PATH ANGLE DEG"
	
	SLE_48.TEXT = ""
	SLE_48.TEXT = "P20 CSM STATE VECTOR"
////////////////////////////////////////////////////FIX HERE/////////////////////////////////////////////	
	ELSEIF (S_PROG = "65") THEN
	/*
WE'RE LANDING ON P65 AUTOPILOT
	*/
	
	CB_20.SETFOCUS()
	SLE_2.ENABLED = TRUE
	SLE_5.ENABLED = TRUE
	SLE_6.ENABLED = TRUE
	CB_16.ENABLED = TRUE
	
	/*
	CB_23.VISIBLE = TRUE
	CB_24.VISIBLE = TRUE
	CB_16.VISIBLE = FALSE
	CB_19.VISIBLE = FALSE
	*/
	
	SLE_5.TEXT = "16 "
	SLE_6.TEXT = "63 "
		
	//UPDATE THE REGISTERS WITH CSM STATE VECTORS AS IT ORBITS ABOVE
	//AGAIN, WE'LL HAVE TO MAKE THIS UP SINCE THE BOOK
	//DOESN'T SAY	
		
	SLE_7.TEXT = "" 
	SLE_8.TEXT = "" 
	SLE_9.TEXT = ""
	
	SLE_7.TEXT = "+00360" 
	SLE_8.TEXT = "+00371" 
	SLE_9.TEXT = "+00450"
	
	SLE_24.TEXT = "DELTA ALTITUDE"
	SLE_26.TEXT = "ALTITUDE RATE"
	SLE_28.TEXT = "COMPUTED ALTITUDE"
	
	SLE_48.TEXT = ""
	SLE_48.TEXT = "P65 LANDING ON AUTOPILOT "
			
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	
//ERROR SITUATION
ELSE
	
	SLE_16.ENABLED = TRUE //TURN ON THE OP ERR LIGHT
	
END IF	 
	 
	 

	

			







